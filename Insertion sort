# Complexity: O(n^2) comparisons and swaps
# Space: O(1) extra space because of in-place
# Stable: Yes
# Only efficient for small data sets
# more efficient than most other quadratic algorithms 

def insertion_sort(nums):
    # @param nums, a list
 	for i in xrange(1, len(nums)):
 		curr = nums[i]
 		pos = i
 		
 		while pos > 0 and nums[pos-1] > curr:
 			num[pos] = num[pos-1]
 			pos -= 1
 		num[pos] = curr
 		
    
    
